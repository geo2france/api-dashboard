{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation de api-dashboard D\u00e9p\u00f4t du projet : https://github.com/geo2france/api-dashboard Demo Odema","title":"Documentation de api-dashboard"},{"location":"#documentation-de-api-dashboard","text":"D\u00e9p\u00f4t du projet : https://github.com/geo2france/api-dashboard","title":"Documentation de api-dashboard"},{"location":"#demo","text":"Odema","title":"Demo"},{"location":"providers/datafair/","text":"DataFair content","title":"DataFair"},{"location":"providers/datafair/#datafair","text":"content","title":"DataFair"},{"location":"providers/file/","text":"Fichier Fichier plat json","title":"Fichier"},{"location":"providers/file/#fichier","text":"Fichier plat json","title":"Fichier"},{"location":"providers/wfs/","text":"WFS WFS 1.0","title":"WFS"},{"location":"providers/wfs/#wfs","text":"WFS 1.0","title":"WFS"},{"location":"usage/controles/","text":"Contr\u00f4les <Dashboard> <Control > <Input name=\"moninput2\"/> <Input name=\"moninput3\"/> <Radio optionType=\"button\" name=\"myRadio\" dataset='myuniquedatasetid' valueField='L_TYP_REG_DECHET' labelField='L_TYP_REG_DECHET'/> </Control> <Dataset id=\"myuniquedatasetid\" provider={ademe_opendataProvider} resource='sinoe-(r)-destination-des-dma-collectes-par-type-de-traitement/lines'> <Transform>SELECT [L_TYP_REG_DECHET], SUM([TONNAGE_DMA]) as [TONNAGE_DMA] FROM ? GROUP BY [L_TYP_REG_DECHET] </Transform> <Producer url=\"https://www.sinoe.org\">Ademe</Producer> <Producer url=\"https://odema-hautsdefrance.org/\">Odema</Producer> </Dataset> {/* [...] */} </Dashboard> Chaque \u00e9l\u00e9ment de control ( Input , Radio , etc..) doit avoir une propri\u00e9t\u00e9 name unique. Utilisation des valeurs utilisateur Le hook useControl permet d'utiliser, de mani\u00e8re dynamique, les valeurs s\u00e9lectionn\u00e9es par l'utilisateur. Les valeurs peuvent \u00eatre inject\u00e9s n'importe o\u00f9 dans le JSX : notamment dans des valeurs de filtres, des titres, du texte, etc. <Dashboard> <Control > <Input name=\"annee\"/> </Control> <Dataset {/* [...] */}> <Filter field=\"year\">{useControl('annee')}</Filter> </Dataset> <div>{`Ann\u00e9e s\u00e9lectionn\u00e9e : ${useControl('annee')}`}</div> <ChartPie title={`R\u00e9partition des observation en ${useControl('annee')}`}> {/* [...] */} </Dashboard> Composants standards Radio et Select Les propri\u00e9t\u00e9s dataset , valueField et labelField permettent de peupler les options avec les donn\u00e9es d'un dataset. Ces donn\u00e9es sont automatiquement d\u00e9doublonn\u00e9es. Il est aussi possible de saisir manuellement les options avec la propri\u00e9t\u00e9 options . Les propri\u00e9t\u00e9s initiales des composants Radio.Group et Select de AntDesign sont support\u00e9es ( optionType , showSearch , etc..). <Radio name=\"radio\" dataset='myuniquedatasetid' valueField='L_TYP_REG_DECHET' labelField='L_TYP_REG_DECHET'/> <Select name=\"radio2\" options={[{label:'A', value:'a'}, {label:'B', value:'b'}]}/> Input Slider A venir NextPrevSelect A venir SelectYear A venir Swith / Checkbox A venir D\u00e9velopper vos contr\u00f4les TODO","title":"Contr\u00f4les"},{"location":"usage/controles/#controles","text":"<Dashboard> <Control > <Input name=\"moninput2\"/> <Input name=\"moninput3\"/> <Radio optionType=\"button\" name=\"myRadio\" dataset='myuniquedatasetid' valueField='L_TYP_REG_DECHET' labelField='L_TYP_REG_DECHET'/> </Control> <Dataset id=\"myuniquedatasetid\" provider={ademe_opendataProvider} resource='sinoe-(r)-destination-des-dma-collectes-par-type-de-traitement/lines'> <Transform>SELECT [L_TYP_REG_DECHET], SUM([TONNAGE_DMA]) as [TONNAGE_DMA] FROM ? GROUP BY [L_TYP_REG_DECHET] </Transform> <Producer url=\"https://www.sinoe.org\">Ademe</Producer> <Producer url=\"https://odema-hautsdefrance.org/\">Odema</Producer> </Dataset> {/* [...] */} </Dashboard> Chaque \u00e9l\u00e9ment de control ( Input , Radio , etc..) doit avoir une propri\u00e9t\u00e9 name unique.","title":"Contr\u00f4les"},{"location":"usage/controles/#utilisation-des-valeurs-utilisateur","text":"Le hook useControl permet d'utiliser, de mani\u00e8re dynamique, les valeurs s\u00e9lectionn\u00e9es par l'utilisateur. Les valeurs peuvent \u00eatre inject\u00e9s n'importe o\u00f9 dans le JSX : notamment dans des valeurs de filtres, des titres, du texte, etc. <Dashboard> <Control > <Input name=\"annee\"/> </Control> <Dataset {/* [...] */}> <Filter field=\"year\">{useControl('annee')}</Filter> </Dataset> <div>{`Ann\u00e9e s\u00e9lectionn\u00e9e : ${useControl('annee')}`}</div> <ChartPie title={`R\u00e9partition des observation en ${useControl('annee')}`}> {/* [...] */} </Dashboard>","title":"Utilisation des valeurs utilisateur"},{"location":"usage/controles/#composants-standards","text":"","title":"Composants standards"},{"location":"usage/controles/#radio-et-select","text":"Les propri\u00e9t\u00e9s dataset , valueField et labelField permettent de peupler les options avec les donn\u00e9es d'un dataset. Ces donn\u00e9es sont automatiquement d\u00e9doublonn\u00e9es. Il est aussi possible de saisir manuellement les options avec la propri\u00e9t\u00e9 options . Les propri\u00e9t\u00e9s initiales des composants Radio.Group et Select de AntDesign sont support\u00e9es ( optionType , showSearch , etc..). <Radio name=\"radio\" dataset='myuniquedatasetid' valueField='L_TYP_REG_DECHET' labelField='L_TYP_REG_DECHET'/> <Select name=\"radio2\" options={[{label:'A', value:'a'}, {label:'B', value:'b'}]}/>","title":"Radio et Select"},{"location":"usage/controles/#input","text":"","title":"Input"},{"location":"usage/controles/#slider","text":"A venir","title":"Slider"},{"location":"usage/controles/#nextprevselect","text":"A venir","title":"NextPrevSelect"},{"location":"usage/controles/#selectyear","text":"A venir","title":"SelectYear"},{"location":"usage/controles/#swith-checkbox","text":"A venir","title":"Swith / Checkbox"},{"location":"usage/controles/#developper-vos-controles","text":"TODO","title":"D\u00e9velopper vos contr\u00f4les"},{"location":"usage/dataset/","text":"Donn\u00e9es La premi\u00e8re \u00e9tape dans la r\u00e9alisation du tableau de bord consiste \u00e0 d\u00e9finir les donn\u00e9es qui seront utilis\u00e9s. La biblithi\u00e8que supporte de mani\u00e8re standard diff\u00e9rents fournisseurs . Certaines op\u00e9rations sont g\u00e9n\u00e9riques ( <Filter> ), alors que d'autres exploitent des capacit\u00e9s sp\u00e9cifiques \u00e0 un fournisseur (propri\u00e9t\u00e9 meta de <Dataset> ). Source de donn\u00e9es Connecter une source Le composant Dataset permet de d\u00e9finir des jeux de donn\u00e9es qui seront utilis\u00e9s par les graphiques. On peut \u00e9galement ajouter des m\u00e9tadonn\u00e9es (producteurs), qui s'afficheront sous les graphiques utilisant ce dataset. <Dashboard> <Dataset id=\"monIdentifiantUnique\" url=\"https://data.ademe.fr/data-fair/api/v1/datasets\" type='datafair' resource=\"sinoe-(r)-destination-des-dma-collectes-par-type-de-traitement/lines\" > <Producer url=\"https://www.sinoe.org\">Ademe</Producer> <Producer url=\"https://odema-hautsdefrance.org/\">Odema</Producer> </Dataset> {/* [...] */} </Dashboard> Filter les donn\u00e9es Il s'agit de filtres envoy\u00e9s \u00e0 l'API du fournisseur de donn\u00e9es . Il utilise des op\u00e9rateurs standards ( eq , ne , contains , etc.) qui sont ensuite automatiquement traduits dans le format attendu par le fournisseur de donn\u00e9es. Voir la liste des op\u00e9rateur . Attention, les fournisseurs ne supportent pas toujours tous les op\u00e9rateurs. <Filter field='L_REGION'>Hauts-de-France</Filter> // operateur eq (\u00e9galit\u00e9) par d\u00e9faut <Filter field='L_TYP_REG_DECHET' operator='ne'>Encombrants</Filter> Fournisseurs diposnibles WFS 1.1 DataFair Fichier Manipuler les donn\u00e9es Transform Le composant enfant <Transform> est optionnel. Il permet de modifier localement les donn\u00e9es du <Dataset> parent. Il doit contenir soit : Une fonction javascript qui traite les donn\u00e9es. Une requ\u00eate SQL (cha\u00eene de caract\u00e8res) (voir la documentation Alasql ). Si plusieurs <Transform> sont ajout\u00e9s, ils sont appliqu\u00e9s successivement sur les donn\u00e9es. Cette op\u00e9ration est effectu\u00e9e c\u00f4t\u00e9 client, et ne modifie donc pas l'appel \u00e0 l'API . <Dashboard> <Dataset id=\"dma_par_type_de_traitement\" url=\"https://data.ademe.fr/data-fair/api/v1/datasets\" type='datafair' resource=\"sinoe-(r)-destination-des-dma-collectes-par-type-de-traitement/lines\" > <Transform>{(data) => data.filter((e) => e.TONNAGE_DMA > 3000)}</Transform> <Transform>SELECT * FROM ? ORDER BY [TONNAGE_DMA] DESC LIMIT 5</Transform> </Dataset> {/* [...] */} </Dashboard> Join Join permet de faire une jointure avec un autre jeu de donn\u00e9es. L'ordre avec les composants Transform est respect\u00e9. Ainsi, un Transform plac\u00e9 apr\u00e8s une jointure s'appliquera sur le produit de la jointure. dataset : identifiant du dataset \u00e0 joindre (= table de droite) joinKey : un tableau avec les champs \u00e0 joindre (ex : ['leftKey','RightKey] ) joinType : type de jointure right | left | full | inner (d\u00e9faut inner ) <Dashboard> <Dataset id=\"ref_epci_odema\" resource='odema:territoire_epci' url='https://www.geo2france.fr/geoserver/ows' type='wfs' pageSize={1000} > <Filter field='annee'>{useControl('annee')}</Filter> </Dataset> <Dataset id=\"sinoe_synthese_indic\" resource='sinoe59-indic-synth-acteur/lines' url=\"https://data.ademe.fr/data-fair/api/v1/datasets\" type='datafair' pageSize={5000}> <Filter field='l_region'>Hauts-de-France</Filter> <Filter field='annee'>{useControl('annee')}</Filter> <Join dataset=\"ref_epci_odema\" joinKey={[\"c_acteur\",\"c_acteur_sinoe\" ]} /> <Transform>SELECT c_acteur, name_short as nom, tonnage_omr, tonnage_bio FROM ?</Transform> </Dataset> </Dashboard> Performances et eco-conception \ud83c\udf31 La biblioth\u00e8que va syst\u00e9matiquement \u00e9viter de lancer plusieurs fois la m\u00eame requ\u00eate. Il est donc important de diff\u00e9rencier les op\u00e9rations s'appliquant c\u00f4t\u00e9 fournisseur de donn\u00e9es de celles effectu\u00e9es par le client. Provider WFS Le WFS permet d'all\u00e9ger les requ\u00eates en ne demandant que les champs n\u00e9cessaire (https://docs.geoserver.org/main/en/user/services/wfs/reference.html#getfeature). Cette fonctionnalit\u00e9 (non standard entre les diff\u00e9rents fournisseurs), peut \u00eatre utilis\u00e9e en utilisant la propri\u00e9t\u00e9 meta de <Dataset> . Id\u00e9alement, on utilisera la m\u00eame propri\u00e9t\u00e9 meta pour les dataset li\u00e9 au m\u00eame fournisseur, afin de r\u00e9duire le nombre de requ\u00eate sur le serveur. <Dataset id=\"epci_hdf_pop\" resource=\"spld:epci\" url='https://www.geo2france.fr/geoserver/ows' type='wfs' pageSize={1000} meta={{properties:['nature_epci', 'pop_mun', 'nom_epci']}} > </Dataset> DataPreview Un tableau simple pour visualiser les donn\u00e9es du dataset. Il s'agit d'un composant utilisable pour faciliter la conception \ud83d\udd27 du tableau de bord. La cl\u00e9 rowKey (colonne qui contient une cl\u00e9 unique) du tableau est optionnelle, mais am\u00e9liore les performances sur des gros datasets. <Dashboard> <Dataset id=\"monIdentifiantUnique\" url=\"https://data.ademe.fr/data-fair/api/v1/datasets\" type='datafair' resource=\"sinoe-(r)-destination-des-dma-collectes-par-type-de-traitement/lines\" /> <DataPreview dataset_id='myuniquedatasetid' pageSize={5} rowKey='_i'/> {/* [...] */} </Dashboard>","title":"Donn\u00e9es"},{"location":"usage/dataset/#donnees","text":"La premi\u00e8re \u00e9tape dans la r\u00e9alisation du tableau de bord consiste \u00e0 d\u00e9finir les donn\u00e9es qui seront utilis\u00e9s. La biblithi\u00e8que supporte de mani\u00e8re standard diff\u00e9rents fournisseurs . Certaines op\u00e9rations sont g\u00e9n\u00e9riques ( <Filter> ), alors que d'autres exploitent des capacit\u00e9s sp\u00e9cifiques \u00e0 un fournisseur (propri\u00e9t\u00e9 meta de <Dataset> ).","title":"Donn\u00e9es"},{"location":"usage/dataset/#source-de-donnees","text":"","title":"Source de donn\u00e9es"},{"location":"usage/dataset/#connecter-une-source","text":"Le composant Dataset permet de d\u00e9finir des jeux de donn\u00e9es qui seront utilis\u00e9s par les graphiques. On peut \u00e9galement ajouter des m\u00e9tadonn\u00e9es (producteurs), qui s'afficheront sous les graphiques utilisant ce dataset. <Dashboard> <Dataset id=\"monIdentifiantUnique\" url=\"https://data.ademe.fr/data-fair/api/v1/datasets\" type='datafair' resource=\"sinoe-(r)-destination-des-dma-collectes-par-type-de-traitement/lines\" > <Producer url=\"https://www.sinoe.org\">Ademe</Producer> <Producer url=\"https://odema-hautsdefrance.org/\">Odema</Producer> </Dataset> {/* [...] */} </Dashboard>","title":"Connecter une source"},{"location":"usage/dataset/#filter-les-donnees","text":"Il s'agit de filtres envoy\u00e9s \u00e0 l'API du fournisseur de donn\u00e9es . Il utilise des op\u00e9rateurs standards ( eq , ne , contains , etc.) qui sont ensuite automatiquement traduits dans le format attendu par le fournisseur de donn\u00e9es. Voir la liste des op\u00e9rateur . Attention, les fournisseurs ne supportent pas toujours tous les op\u00e9rateurs. <Filter field='L_REGION'>Hauts-de-France</Filter> // operateur eq (\u00e9galit\u00e9) par d\u00e9faut <Filter field='L_TYP_REG_DECHET' operator='ne'>Encombrants</Filter>","title":"Filter les donn\u00e9es"},{"location":"usage/dataset/#fournisseurs-diposnibles","text":"WFS 1.1 DataFair Fichier","title":"Fournisseurs diposnibles"},{"location":"usage/dataset/#manipuler-les-donnees","text":"","title":"Manipuler les donn\u00e9es"},{"location":"usage/dataset/#transform","text":"Le composant enfant <Transform> est optionnel. Il permet de modifier localement les donn\u00e9es du <Dataset> parent. Il doit contenir soit : Une fonction javascript qui traite les donn\u00e9es. Une requ\u00eate SQL (cha\u00eene de caract\u00e8res) (voir la documentation Alasql ). Si plusieurs <Transform> sont ajout\u00e9s, ils sont appliqu\u00e9s successivement sur les donn\u00e9es. Cette op\u00e9ration est effectu\u00e9e c\u00f4t\u00e9 client, et ne modifie donc pas l'appel \u00e0 l'API . <Dashboard> <Dataset id=\"dma_par_type_de_traitement\" url=\"https://data.ademe.fr/data-fair/api/v1/datasets\" type='datafair' resource=\"sinoe-(r)-destination-des-dma-collectes-par-type-de-traitement/lines\" > <Transform>{(data) => data.filter((e) => e.TONNAGE_DMA > 3000)}</Transform> <Transform>SELECT * FROM ? ORDER BY [TONNAGE_DMA] DESC LIMIT 5</Transform> </Dataset> {/* [...] */} </Dashboard>","title":"Transform"},{"location":"usage/dataset/#join","text":"Join permet de faire une jointure avec un autre jeu de donn\u00e9es. L'ordre avec les composants Transform est respect\u00e9. Ainsi, un Transform plac\u00e9 apr\u00e8s une jointure s'appliquera sur le produit de la jointure. dataset : identifiant du dataset \u00e0 joindre (= table de droite) joinKey : un tableau avec les champs \u00e0 joindre (ex : ['leftKey','RightKey] ) joinType : type de jointure right | left | full | inner (d\u00e9faut inner ) <Dashboard> <Dataset id=\"ref_epci_odema\" resource='odema:territoire_epci' url='https://www.geo2france.fr/geoserver/ows' type='wfs' pageSize={1000} > <Filter field='annee'>{useControl('annee')}</Filter> </Dataset> <Dataset id=\"sinoe_synthese_indic\" resource='sinoe59-indic-synth-acteur/lines' url=\"https://data.ademe.fr/data-fair/api/v1/datasets\" type='datafair' pageSize={5000}> <Filter field='l_region'>Hauts-de-France</Filter> <Filter field='annee'>{useControl('annee')}</Filter> <Join dataset=\"ref_epci_odema\" joinKey={[\"c_acteur\",\"c_acteur_sinoe\" ]} /> <Transform>SELECT c_acteur, name_short as nom, tonnage_omr, tonnage_bio FROM ?</Transform> </Dataset> </Dashboard>","title":"Join"},{"location":"usage/dataset/#performances-et-eco-conception","text":"La biblioth\u00e8que va syst\u00e9matiquement \u00e9viter de lancer plusieurs fois la m\u00eame requ\u00eate. Il est donc important de diff\u00e9rencier les op\u00e9rations s'appliquant c\u00f4t\u00e9 fournisseur de donn\u00e9es de celles effectu\u00e9es par le client.","title":"Performances et eco-conception \ud83c\udf31"},{"location":"usage/dataset/#provider-wfs","text":"Le WFS permet d'all\u00e9ger les requ\u00eates en ne demandant que les champs n\u00e9cessaire (https://docs.geoserver.org/main/en/user/services/wfs/reference.html#getfeature). Cette fonctionnalit\u00e9 (non standard entre les diff\u00e9rents fournisseurs), peut \u00eatre utilis\u00e9e en utilisant la propri\u00e9t\u00e9 meta de <Dataset> . Id\u00e9alement, on utilisera la m\u00eame propri\u00e9t\u00e9 meta pour les dataset li\u00e9 au m\u00eame fournisseur, afin de r\u00e9duire le nombre de requ\u00eate sur le serveur. <Dataset id=\"epci_hdf_pop\" resource=\"spld:epci\" url='https://www.geo2france.fr/geoserver/ows' type='wfs' pageSize={1000} meta={{properties:['nature_epci', 'pop_mun', 'nom_epci']}} > </Dataset>","title":"Provider WFS"},{"location":"usage/dataset/#datapreview","text":"Un tableau simple pour visualiser les donn\u00e9es du dataset. Il s'agit d'un composant utilisable pour faciliter la conception \ud83d\udd27 du tableau de bord. La cl\u00e9 rowKey (colonne qui contient une cl\u00e9 unique) du tableau est optionnelle, mais am\u00e9liore les performances sur des gros datasets. <Dashboard> <Dataset id=\"monIdentifiantUnique\" url=\"https://data.ademe.fr/data-fair/api/v1/datasets\" type='datafair' resource=\"sinoe-(r)-destination-des-dma-collectes-par-type-de-traitement/lines\" /> <DataPreview dataset_id='myuniquedatasetid' pageSize={5} rowKey='_i'/> {/* [...] */} </Dashboard>","title":"DataPreview"},{"location":"usage/dataviz/","text":"Graphiques (dataviz) La biblioth\u00e8que fournie quelques graphiques de base pouvant \u00eatre utiliser directement. Ma sa grande force r\u00e9side dans le fait de pouvoir cr\u00e9er vos propres graphiques \u00e0 partir de n'importe quelle biblioth\u00e8que (ECharts, Rechart, Chart.js, D3.js, etc.). Graphiques standards YearSerie Adapt\u00e9 aux repr\u00e9sentations de valeurs annuelles. Nom Type Requis Par d\u00e9faut Description dataset string \u2733\ufe0f \u2014 Identifiant du dataset \u00e0 utiliser. yearKey string \u2733\ufe0f \u2014 Nom de la colonne contennant l'ann\u00e9e. valueKey string \u2733\ufe0f \u2014 Nom de la colonne contenant la valeur num\u00e9rique categoryKey string \u2014 Colonne pour grouper les donn\u00e9es par cat\u00e9gorie (ex : type, secteur...). title string \u2014 Titre du graphique. stack boolean false Empile les s\u00e9ries si plusieurs cat\u00e9gories sont pr\u00e9sentes. yearMark number \\| string \u2014 Ann\u00e9e \u00e0 mettre en \u00e9vidence (ex : 2021 ou useControl('annee') ) type 'bar' \\| 'line' \\| 'area' 'line' Type de graphique \u00e0 afficher. Pie Graphique \"camembert\". Si des cat\u00e9gories sont dupliqu\u00e9es, les valeurs de celles-ci sont automatiquement somm\u00e9es. Nom Type Requis Par d\u00e9faut Description dataset string \u2733\ufe0f \u2014 Identifiant du dataset \u00e0 utiliser. dataKey string \u2733\ufe0f \u2014 Nom de la colonne contenant les valeurs num\u00e9riques \u00e0 repr\u00e9senter. nameKey string \u2733\ufe0f \u2014 Nom de la colonne contenant les cat\u00e9gories (libell\u00e9s des parts). donut boolean false Affiche le graphique en style donut (camembert avec un trou central). unit string Unit\u00e9 \u00e0 afficher (ex: % , kg , etc.) title string Titre du graphique Exemple <Dashboard> <Dataset id=\"dma_collecte_traitement\" resource='sinoe-(r)-destination-des-dma-collectes-par-type-de-traitement/lines' url=\"https://data.ademe.fr/data-fair/api/v1/datasets\" type='datafair' pageSize={5000}> <Filter field='L_REGION'>Hauts-de-France</Filter> <Filter field='L_TYP_REG_DECHET' operator='ne'>Encombrants</Filter> <Filter field='ANNEE'>{useControl('annee')}</Filter> <Transform>SELECT [L_TYP_REG_DECHET], [ANNEE], [C_DEPT], SUM([TONNAGE_DMA]) as [TONNAGE_DMA] FROM ? GROUP BY [ANNEE], [C_DEPT], [L_TYP_REG_DECHET]</Transform> <Transform>{(data) => data.map(row=>({pouette:4, ...row}))}</Transform> <Producer url=\"https://www.sinoe.org\">Ademe</Producer> <Producer url=\"https://odema-hautsdefrance.org/\">Odema</Producer> </Dataset> <ChartPie // Identifiant du dataset (obligatoire si plusieurs dataset) dataset=\"destination-dma\" // Colonne qui contient les valeurs num\u00e9riques dataKey='TONNAGE_DMA' // Colonne qui contient les cat\u00e9gories nameKey='L_TYP_REG_DECHET' // Variante \"donut\" (trou central) donut /> </Dashboard> D\u00e9velopper vos propres graphiques TODO","title":"Graphiques (dataviz)"},{"location":"usage/dataviz/#graphiques-dataviz","text":"La biblioth\u00e8que fournie quelques graphiques de base pouvant \u00eatre utiliser directement. Ma sa grande force r\u00e9side dans le fait de pouvoir cr\u00e9er vos propres graphiques \u00e0 partir de n'importe quelle biblioth\u00e8que (ECharts, Rechart, Chart.js, D3.js, etc.).","title":"Graphiques (dataviz)"},{"location":"usage/dataviz/#graphiques-standards","text":"","title":"Graphiques standards"},{"location":"usage/dataviz/#yearserie","text":"Adapt\u00e9 aux repr\u00e9sentations de valeurs annuelles. Nom Type Requis Par d\u00e9faut Description dataset string \u2733\ufe0f \u2014 Identifiant du dataset \u00e0 utiliser. yearKey string \u2733\ufe0f \u2014 Nom de la colonne contennant l'ann\u00e9e. valueKey string \u2733\ufe0f \u2014 Nom de la colonne contenant la valeur num\u00e9rique categoryKey string \u2014 Colonne pour grouper les donn\u00e9es par cat\u00e9gorie (ex : type, secteur...). title string \u2014 Titre du graphique. stack boolean false Empile les s\u00e9ries si plusieurs cat\u00e9gories sont pr\u00e9sentes. yearMark number \\| string \u2014 Ann\u00e9e \u00e0 mettre en \u00e9vidence (ex : 2021 ou useControl('annee') ) type 'bar' \\| 'line' \\| 'area' 'line' Type de graphique \u00e0 afficher.","title":"YearSerie"},{"location":"usage/dataviz/#pie","text":"Graphique \"camembert\". Si des cat\u00e9gories sont dupliqu\u00e9es, les valeurs de celles-ci sont automatiquement somm\u00e9es. Nom Type Requis Par d\u00e9faut Description dataset string \u2733\ufe0f \u2014 Identifiant du dataset \u00e0 utiliser. dataKey string \u2733\ufe0f \u2014 Nom de la colonne contenant les valeurs num\u00e9riques \u00e0 repr\u00e9senter. nameKey string \u2733\ufe0f \u2014 Nom de la colonne contenant les cat\u00e9gories (libell\u00e9s des parts). donut boolean false Affiche le graphique en style donut (camembert avec un trou central). unit string Unit\u00e9 \u00e0 afficher (ex: % , kg , etc.) title string Titre du graphique","title":"Pie"},{"location":"usage/dataviz/#exemple","text":"<Dashboard> <Dataset id=\"dma_collecte_traitement\" resource='sinoe-(r)-destination-des-dma-collectes-par-type-de-traitement/lines' url=\"https://data.ademe.fr/data-fair/api/v1/datasets\" type='datafair' pageSize={5000}> <Filter field='L_REGION'>Hauts-de-France</Filter> <Filter field='L_TYP_REG_DECHET' operator='ne'>Encombrants</Filter> <Filter field='ANNEE'>{useControl('annee')}</Filter> <Transform>SELECT [L_TYP_REG_DECHET], [ANNEE], [C_DEPT], SUM([TONNAGE_DMA]) as [TONNAGE_DMA] FROM ? GROUP BY [ANNEE], [C_DEPT], [L_TYP_REG_DECHET]</Transform> <Transform>{(data) => data.map(row=>({pouette:4, ...row}))}</Transform> <Producer url=\"https://www.sinoe.org\">Ademe</Producer> <Producer url=\"https://odema-hautsdefrance.org/\">Odema</Producer> </Dataset> <ChartPie // Identifiant du dataset (obligatoire si plusieurs dataset) dataset=\"destination-dma\" // Colonne qui contient les valeurs num\u00e9riques dataKey='TONNAGE_DMA' // Colonne qui contient les cat\u00e9gories nameKey='L_TYP_REG_DECHET' // Variante \"donut\" (trou central) donut /> </Dashboard>","title":"Exemple"},{"location":"usage/dataviz/#developper-vos-propres-graphiques","text":"TODO","title":"D\u00e9velopper vos propres graphiques"},{"location":"usage/page/","text":"Page Une page est de tableau de bord est rendue par le composant <Dasbhoard> . Cette page va contenir : Des jeux de donn\u00e9es ( <Dataset> ) Une barre de contr\u00f4les utilisateurs ( <Control> ) Et bien s\u00fbr des dataviz et/ou cartographies ! // Exemple minimaliste. On affiche un camenbert \u00e0 partir d'un jeu de donn\u00e9es // propos\u00e9 par l'ADEME sur son portail open-data import { Dashboard, Dataset, Control, ChartPie } from \"@geo2france/api-dashboard\" export const MaPremierePage = () => ( <Dashboard> <Dataset id=\"dma_collecte_traitement\" resource=\"sinoe-(r)-destination-des-dma-collectes-par-type-de-traitement/lines\" url=\"https://data.ademe.fr/data-fair/api/v1/datasets\" type=\"datafair\" pageSize={5000}> </Dataset> <Control> <Select name=\"annee\" options={[2021,2019,2017]} initial_value={2019} arrows={true} /> </Control> <ChartPie title=\"Tonnages de d\u00e9chets\" dataset='dma_collecte_traitement' nameKey='L_TYP_REG_DECHET' dataKey='TONNAGE_DMA' /> </Dashboard> ) Palette graphique L'ajout d'une palette permet de personnaliser les couleurs utilis\u00e9es par les graphiques de la page. La palette est un gradient de couleur d\u00e9finie \u00e0 partir de 2 couleurs ou plus. Les graphiques utilisent ensuite des couleurs r\u00e9parties de fa\u00e7on optimale le long de ce gradient. La palette s'applique \u00e0 l'ensemble de la page. <Dasbhoard> <Palette steps={['#95c11f','#ed1c24','#0f4496']} /> {/* ... */} </Dasbboard> Debug Lors de la conception du tableau de bord, il est possible d'ajouter un composant <Debug/> directement dans <Dashboard> . Celui-ci ajoute un bouton dans le coin sup\u00e9rieur droit, permettant d'afficher diff\u00e9rentes informations utiles.","title":"Page"},{"location":"usage/page/#page","text":"Une page est de tableau de bord est rendue par le composant <Dasbhoard> . Cette page va contenir : Des jeux de donn\u00e9es ( <Dataset> ) Une barre de contr\u00f4les utilisateurs ( <Control> ) Et bien s\u00fbr des dataviz et/ou cartographies ! // Exemple minimaliste. On affiche un camenbert \u00e0 partir d'un jeu de donn\u00e9es // propos\u00e9 par l'ADEME sur son portail open-data import { Dashboard, Dataset, Control, ChartPie } from \"@geo2france/api-dashboard\" export const MaPremierePage = () => ( <Dashboard> <Dataset id=\"dma_collecte_traitement\" resource=\"sinoe-(r)-destination-des-dma-collectes-par-type-de-traitement/lines\" url=\"https://data.ademe.fr/data-fair/api/v1/datasets\" type=\"datafair\" pageSize={5000}> </Dataset> <Control> <Select name=\"annee\" options={[2021,2019,2017]} initial_value={2019} arrows={true} /> </Control> <ChartPie title=\"Tonnages de d\u00e9chets\" dataset='dma_collecte_traitement' nameKey='L_TYP_REG_DECHET' dataKey='TONNAGE_DMA' /> </Dashboard> )","title":"Page"},{"location":"usage/page/#palette-graphique","text":"L'ajout d'une palette permet de personnaliser les couleurs utilis\u00e9es par les graphiques de la page. La palette est un gradient de couleur d\u00e9finie \u00e0 partir de 2 couleurs ou plus. Les graphiques utilisent ensuite des couleurs r\u00e9parties de fa\u00e7on optimale le long de ce gradient. La palette s'applique \u00e0 l'ensemble de la page. <Dasbhoard> <Palette steps={['#95c11f','#ed1c24','#0f4496']} /> {/* ... */} </Dasbboard>","title":"Palette graphique"},{"location":"usage/page/#debug","text":"Lors de la conception du tableau de bord, il est possible d'ajouter un composant <Debug/> directement dans <Dashboard> . Celui-ci ajoute un bouton dans le coin sup\u00e9rieur droit, permettant d'afficher diff\u00e9rentes informations utiles.","title":"Debug"},{"location":"usage/template/","text":"Mise en place du projet Partir d'un template. Gestion des pages config.ts Personnalisation Theme, titre, footer, etc. R\u00e9daction en cours","title":"Mise en place du projet"},{"location":"usage/template/#mise-en-place-du-projet","text":"Partir d'un template.","title":"Mise en place du projet"},{"location":"usage/template/#gestion-des-pages","text":"config.ts","title":"Gestion des pages"},{"location":"usage/template/#personnalisation","text":"Theme, titre, footer, etc. R\u00e9daction en cours","title":"Personnalisation"}]}